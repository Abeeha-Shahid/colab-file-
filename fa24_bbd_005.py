# -*- coding: utf-8 -*-
"""FA24-BBD-005.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RYWCd7sy5PcZNsobfSFSyUpJGOeIA56Z
"""



"""**FA24-BBD-005 - ABEEHA SHAHID**"""

#Activity  Goal: Practice different techniques for dealing with missing data.
import pandas as pd
import numpy as np

#1.	Identify columns with more than 20% missing values and drop them.
df = pd.read_csv("melb_data_week1.csv")
missing_person = df.isna().sum()

missing_percentage = (missing_person / len(df)) * 100

columns_to_drop = missing_percentage[missing_percentage > 20].index
print(columns_to_drop)

#Activity Goal: Use filtering and indexing techniques to extract meaningful data subsets.
#1
richmond_houses = df[(df["Suburb"] == "Richmond") & (df["Price"] > 1000000)]
print(richmond_houses.head())
#2
df_filtered = df.loc[df["Landsize"] > 500, ["Price", "Suburb", "BuildingArea"]]
print(df_filtered.head())
#3
df_sorted = df.sort_values(by="Price", ascending=False)
print(df_sorted.head(5))

#Activity Goal: Apply transformation techniques to create new insights from the data.
#1
df["Price_per_Room"] = df["Price"] / df["Rooms"]
print(df[["Price", "Rooms", "Price_per_Room"]].head())
#2
df["Date"] = pd.to_datetime(df["Date"],format='mixed')
print(df["Date"].head(4))
#3
df["Year_Sold"] = df["Date"].dt.year
print(df[["Date", "Year_Sold"]].head())

#4
#Activity Goal: Learn how to group and aggregate data for analysis.
#1

suburb_avg_price = df.groupby("Suburb")["Price"].mean()
print(suburb_avg_price)
properties_per_suburb = df.groupby("Suburb")["Price"].count()
print(properties_per_suburb)
most_expensive_suburb = suburb_avg_price.idxmax()
print("Most expensive suburb:", most_expensive_suburb)

#5
#1.	Save the cleaned dataset into a new CSV file.
df.to_csv("cleaned_melb_data.csv", index=False)

#5
#Bonus Challenge (For Advanced Students)
median_price = df["Price"].median()
df["Category"] = df["Price"].apply(lambda x: "Expensive" if x > median_price else "Affordable")
print(df[["Price", "Category"]].head())
correlation = df["Price"].corr(df["Rooms"])
print("Correlation between Price and Rooms:", correlation)

highest_priced_suburb = df[df["Price"] == df["Price"].max()]["Suburb"].values[0]
price_room_correlation = df["Price"].corr(df["Rooms"])

with open("summary_report.txt", "w") as f:
    f.write(f"Suburb with highest price: {highest_priced_suburb}\n")
    f.write(f"Correlation between price & rooms: {price_room_correlation}\n")

